Problem ID,Thinking,Coding,LeetCode Tags,Tags,Runtime,Space,Variables,Notes
count-substrings-that-satisfy-k-constraint-i,5,5,String|Sliding Window,,N,1,N = length of array,
lucky-numbers-in-a-matrix,5,2,Array|Matrix,,N*M,N*M,N = number of rows|M = number of columns,
percentage-of-letter-in-string,1,2,String,,1,1,,
rearrange-characters-to-make-target-string,2,2,Hash Table|String|Counting,,N+M,1,N = length of s|M = length of target,
split-the-array,2,2,Array|Hash Table|Counting,Parity,N,N,N = length of array,
divide-an-array-into-subarrays-with-minimum-cost-i,2,2,Array|Sorting|Enumeration,,N,1,N = length of array,
longest-common-prefix,1,2,String|Trie,,N*M,P,N = number of strings|M = length of shortest string|P = length of prefix,
alternating-digit-sum,1,2,Math,,log(N),1,,
pascals-triangle,2,5,Array|Dynamic Programming,,N^2,N^2,,
count-integers-with-even-digit-sum,5,5,Math|Simulation,,log(N),1,,
lowest-common-ancestor-of-a-binary-tree,2,10,Tree|Depth-First Search|Binary Tree,,D,N,D = depth of tree|N = number of nodes,
maximum-product-after-k-increments,2,2,Array|Greedy|Heap (Priority Queue),,K*log(N),N,N = length of array|K = number of increments,
number-of-ways-to-select-buildings,5,5,String|Dynamic Programming|Prefix Sum,Markov Model,N,1,N = length of array,
kth-missing-positive-number,15,10,Array|Binary Search,,log(N),1,N = length of array,
shortest-subarray-with-sum-at-least-k,15,10,Array|Binary Search|Queue|Sliding Window|Heap (Priority Queue)|Prefix Sum|Monotonic Queue,,N,N,N = length of array,
special-array-ii,5,10,Array|Binary Search|Prefix Sum,,N+Q*log(N),N,N = length of array|Q = number of queries,
knight-dialer,5,15,Dynamic Programming,Markov Model,log(N),1,N = length of array,"There is inflated time on the Coding score because of the need to code your own matrix power and matrix multiplication with modulos. Otherwise, the score would be 5."
number-of-ways-to-paint-n-3-grid,5,15,Dynamic Programming,Markov Model,log(N),1,N = length of array,"There is inflated time on the Coding score because of the need to code your own matrix power and matrix multiplication with modulos. Otherwise, the score would be 5."
reverse-prefix-of-word,1,2,Two Pointers|String|Stack,,N,N,N = length of word,
check-if-one-string-swap-can-make-strings-equal,1,2,Hash Table|String|Counting,,"min(N,M)",1,N = length of s1|M = length of s2,
make-string-a-subsequence-using-cyclic-increments,1,2,Two Pointers|String,,N,1,N = length of str1,
minimum-difference-in-sums-after-removal-of-elements,15,10,Array|Dynamic Programming|Heap (Priority Queue),,N*log(N),N,N = length of nums,
number-of-ways-to-form-a-target-string-given-a-dictionary,2,10,Array|String|Dynamic Programming,,M(N+K),K,N = number of words|M = length of each word|K = length of target,
two-best-non-overlapping-events,5,5,Array|Binary Search|Dynamic Programming|Sorting|Heap (Priority Queue),,N*log(N),N,N = number of events,
copy-list-with-random-pointer,1,5,Hash Table|Linked List,,N,N,N = number of nodes,
max-dot-product-of-two-subsequences,5,10,Array|Dynamic Programming,,N*M,"min(N,M)",N = length of nums1|M = length of nums2,
maximum-score-after-splitting-a-string,1,2,String|Prefix Sum,,N,1,N = length of string,
minimum-cost-for-tickets,2,5,Array|Dynamic Programming,,N,N,N = number of days,
largest-number,5,5,Array|String|Greedy|Sorting,,N*log(N),N,N = length of nums,
number-of-ways-to-split-array,2,2,Array|Prefix Sum,,N,1,N = length of nums,
n-queens,2,5,Array|Backtracking,,N!,N!*N^2,,
sort-colors,1,2,Array|Two Pointers|Sorting,,N,1,N = length of nums,
shifting-letters-ii,5,5,Array|String|Prefix Sum,,N+M,N,N = length of s|M = length of shifts,
